"""check

Revision ID: 4104246fbf4e
Revises: 
Create Date: 2018-06-11 09:11:15.584159

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '4104246fbf4e'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('date_main_window',
    sa.Column('time_zone', sa.Integer(), nullable=False),
    sa.Column('weather', sa.Integer(), nullable=True),
    sa.Column('euro', sa.Integer(), nullable=True),
    sa.PrimaryKeyConstraint('time_zone')
    )
    op.create_table('language',
    sa.Column('id_language', sa.Integer(), nullable=False),
    sa.Column('type', sa.String(length=5), nullable=True),
    sa.PrimaryKeyConstraint('id_language')
    )
    op.create_table('point',
    sa.Column('id_point', sa.Integer(), nullable=False),
    sa.Column('id', sa.String(length=10), nullable=True),
    sa.Column('latitude', sa.String(length=15), nullable=True),
    sa.Column('longitude', sa.String(length=15), nullable=True),
    sa.Column('subtitle', sa.String(length=100), nullable=True),
    sa.Column('illustration', sa.String(length=100), nullable=True),
    sa.PrimaryKeyConstraint('id_point')
    )
    op.create_table('role',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=64), nullable=True),
    sa.Column('description', sa.String(length=256), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name')
    )
    op.create_table('route',
    sa.Column('id_route', sa.Integer(), nullable=False),
    sa.Column('average_check', sa.Float(), nullable=True),
    sa.Column('time', sa.Float(), nullable=True),
    sa.Column('distance', sa.Float(), nullable=True),
    sa.Column('photo_url', sa.String(length=200), nullable=True),
    sa.PrimaryKeyConstraint('id_route')
    )
    op.create_table('point_name',
    sa.Column('id_point', sa.Integer(), nullable=False),
    sa.Column('language', sa.Integer(), nullable=False),
    sa.Column('id_route', sa.Integer(), nullable=True),
    sa.Column('title', sa.String(length=256), nullable=True),
    sa.ForeignKeyConstraint(['id_point'], ['point.id_point'], ),
    sa.ForeignKeyConstraint(['id_route'], ['route.id_route'], ),
    sa.ForeignKeyConstraint(['language'], ['language.id_language'], ),
    sa.PrimaryKeyConstraint('id_point', 'language')
    )
    op.create_table('route_name',
    sa.Column('id_route', sa.Integer(), nullable=False),
    sa.Column('language', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=256), nullable=True),
    sa.ForeignKeyConstraint(['id_route'], ['route.id_route'], ),
    sa.ForeignKeyConstraint(['language'], ['language.id_language'], ),
    sa.PrimaryKeyConstraint('id_route', 'language')
    )
    op.create_table('user',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('login', sa.String(length=128), nullable=True),
    sa.Column('email', sa.String(length=128), nullable=True),
    sa.Column('password', sa.String(length=255), nullable=True),
    sa.Column('active', sa.Boolean(), nullable=True),
    sa.Column('role_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['role_id'], ['role.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('login')
    )
    op.drop_table('history_transactions')
    op.drop_table('users')
    op.drop_table('history_accounts')
    op.drop_table('history_ledgers')
    op.drop_table('history_operation_participants')
    op.drop_table('my_subgroup')
    op.drop_table('student')
    op.drop_table('history_effects')
    op.drop_table('history_transaction_participants')
    op.drop_table('gorp_migrations')
    op.drop_table('students')
    op.drop_table('history_operations')
    op.drop_table('my_group')
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('my_group',
    sa.Column('id_group', sa.INTEGER(), server_default=sa.text("nextval('my_group_id_group_seq'::regclass)"), nullable=False),
    sa.Column('name_group', sa.TEXT(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id_group', name='my_group_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('history_operations',
    sa.Column('id', sa.BIGINT(), autoincrement=False, nullable=False),
    sa.Column('transaction_id', sa.BIGINT(), autoincrement=False, nullable=False),
    sa.Column('application_order', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('type', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('details', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('source_account', sa.VARCHAR(length=64), server_default=sa.text("''::character varying"), autoincrement=False, nullable=False)
    )
    op.create_table('students',
    sa.Column('id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('first_name', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('second_name', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('gruop_number', sa.TEXT(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='students_pkey')
    )
    op.create_table('gorp_migrations',
    sa.Column('id', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('applied_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='gorp_migrations_pkey')
    )
    op.create_table('history_transaction_participants',
    sa.Column('id', sa.INTEGER(), nullable=False),
    sa.Column('history_transaction_id', sa.BIGINT(), autoincrement=False, nullable=False),
    sa.Column('history_account_id', sa.BIGINT(), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='history_transaction_participants_pkey')
    )
    op.create_table('history_effects',
    sa.Column('history_account_id', sa.BIGINT(), autoincrement=False, nullable=False),
    sa.Column('history_operation_id', sa.BIGINT(), autoincrement=False, nullable=False),
    sa.Column('order', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('type', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('details', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True)
    )
    op.create_table('student',
    sa.Column('id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('first_name', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('second_name', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('gruop_number', sa.TEXT(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='student_pkey')
    )
    op.create_table('my_subgroup',
    sa.Column('id_subgroup', sa.INTEGER(), nullable=False),
    sa.Column('id_group', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('name_subgroup', sa.TEXT(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['id_group'], ['my_group.id_group'], name='my_subgroup_id_group_fkey'),
    sa.PrimaryKeyConstraint('id_subgroup', name='my_subgroup_pkey')
    )
    op.create_table('history_operation_participants',
    sa.Column('id', sa.INTEGER(), nullable=False),
    sa.Column('history_operation_id', sa.BIGINT(), autoincrement=False, nullable=False),
    sa.Column('history_account_id', sa.BIGINT(), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='history_operation_participants_pkey')
    )
    op.create_table('history_ledgers',
    sa.Column('sequence', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('ledger_hash', sa.VARCHAR(length=64), autoincrement=False, nullable=False),
    sa.Column('previous_ledger_hash', sa.VARCHAR(length=64), autoincrement=False, nullable=True),
    sa.Column('transaction_count', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=False),
    sa.Column('operation_count', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=False),
    sa.Column('closed_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('id', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('importer_version', sa.INTEGER(), server_default=sa.text('1'), autoincrement=False, nullable=False),
    sa.Column('total_coins', sa.BIGINT(), autoincrement=False, nullable=False),
    sa.Column('fee_pool', sa.BIGINT(), autoincrement=False, nullable=False),
    sa.Column('base_fee', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('base_reserve', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('max_tx_set_size', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('protocol_version', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=False)
    )
    op.create_table('history_accounts',
    sa.Column('id', sa.BIGINT(), server_default=sa.text("nextval('history_accounts_id_seq'::regclass)"), nullable=False),
    sa.Column('address', sa.VARCHAR(length=64), autoincrement=False, nullable=True)
    )
    op.create_table('users',
    sa.Column('id_user', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('admin', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('state', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('my_group', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('subgroup', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('message', sa.TEXT(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id_user', name='users_pkey')
    )
    op.create_table('history_transactions',
    sa.Column('transaction_hash', sa.VARCHAR(length=64), autoincrement=False, nullable=False),
    sa.Column('ledger_sequence', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('application_order', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('account', sa.VARCHAR(length=64), autoincrement=False, nullable=False),
    sa.Column('account_sequence', sa.BIGINT(), autoincrement=False, nullable=False),
    sa.Column('fee_paid', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('operation_count', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('id', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('tx_envelope', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('tx_result', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('tx_meta', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('tx_fee_meta', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('signatures', postgresql.ARRAY(sa.VARCHAR(length=96)), server_default=sa.text("'{}'::character varying[]"), autoincrement=False, nullable=False),
    sa.Column('memo_type', sa.VARCHAR(), server_default=sa.text("'none'::character varying"), autoincrement=False, nullable=False),
    sa.Column('memo', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('time_bounds', postgresql.INT8RANGE(), autoincrement=False, nullable=True)
    )
    op.drop_table('user')
    op.drop_table('route_name')
    op.drop_table('point_name')
    op.drop_table('route')
    op.drop_table('role')
    op.drop_table('point')
    op.drop_table('language')
    op.drop_table('date_main_window')
    # ### end Alembic commands ###
